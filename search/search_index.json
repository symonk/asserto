{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the documentation for Asserto . \u00b6 Usage \u00b6 Asserto is a simple assertion library to add flexibility and fluency into assertions. Asserto makes assertion writing powerful yet effortless for the more complex scenarios. Check out some examples below: Fluent API: \u00b6 Asserto exposes a fully fluent API for chaining assertions against a value. from asserto import asserto def test_multiple_assert_fluency () -> None : asserto ( \"Hello\" ) . has_length ( 5 ) . match ( r \"\\w {5} $\" ) . ends_with ( \"lo\" ) . starts_with ( \"Hel\" ) Soft Assertions: \u00b6 Asserto Has soft capabilities; allowing multiple assertions to be performed before failing with a summary of the failures. from asserto import asserto def test_baz () -> None : with asserto ( \"Baz\" ) as context : # asserto when used in a python context is run in 'soft' mode; # upon exiting the context; congregated errors are subsequently raised (if any) context . starts_with ( \"B\" ) . ends_with ( \"z\" ) . is_equal_to ( \"Baz\" ) . has_length ( 2 ) # Ends in a failure. Will result in the following: def test_foo ( asserto ) -> None: > with asserto ( \"Bar\" ) as context: E AssertionError: 1 Soft Assertion Failures E [ AssertionError ( \"Length of: 'Bar' was not equal to: 2\" )] Exception Handling: \u00b6 Asserto has the ability to assert exceptions are raised on callables using a simple API. from asserto import asserto import typing def simple_callable ( x : int ) -> typing . NoReturn : raise ValueError ( x ) def test_exc_handling (): asserto ( simple_callable ) . should_raise ( ValueError ) . when_called_with ( x = 25 ) Dynamic Lookups: \u00b6 Asserto has the ability to dynamically lookup attributes on any object type. This is handled using the attr_is(expected) syntax. from asserto import asserto class Foo : def __init__ ( self , x ) -> None : self . x = x def double_x ( self ) -> int : return self . x * 2 def test_foo_dynamically () -> None : # dynamically looking up `x` (attr) or `double_x` bound method & invoking it! asserto ( Foo ( 10 )) . x_is ( 10 ) . double_x_is ( 20 ) Dynamic assert registration \u00b6 Asserto allows users to easily bolt on their assertion functions. from asserto import asserto from asserto import register_assert @register_assert # Option 1. def custom_assert ( self ): if self . actual != 5 : self . check_should_raise ( f \" { self . actual } did not equal five!\" ) register_assert ( custom_assert ) # Option 2 def test_user_defined_callables () -> None : asserto ( 6 ) . custom_assert () yields the following: E AssertionError: 6 did not equal five!","title":"Introduction"},{"location":"#welcome-to-the-documentation-for-asserto","text":"","title":"Welcome to the documentation for Asserto."},{"location":"#usage","text":"Asserto is a simple assertion library to add flexibility and fluency into assertions. Asserto makes assertion writing powerful yet effortless for the more complex scenarios. Check out some examples below:","title":"Usage"},{"location":"#fluent-api","text":"Asserto exposes a fully fluent API for chaining assertions against a value. from asserto import asserto def test_multiple_assert_fluency () -> None : asserto ( \"Hello\" ) . has_length ( 5 ) . match ( r \"\\w {5} $\" ) . ends_with ( \"lo\" ) . starts_with ( \"Hel\" )","title":"Fluent API:"},{"location":"#soft-assertions","text":"Asserto Has soft capabilities; allowing multiple assertions to be performed before failing with a summary of the failures. from asserto import asserto def test_baz () -> None : with asserto ( \"Baz\" ) as context : # asserto when used in a python context is run in 'soft' mode; # upon exiting the context; congregated errors are subsequently raised (if any) context . starts_with ( \"B\" ) . ends_with ( \"z\" ) . is_equal_to ( \"Baz\" ) . has_length ( 2 ) # Ends in a failure. Will result in the following: def test_foo ( asserto ) -> None: > with asserto ( \"Bar\" ) as context: E AssertionError: 1 Soft Assertion Failures E [ AssertionError ( \"Length of: 'Bar' was not equal to: 2\" )]","title":"Soft Assertions:"},{"location":"#exception-handling","text":"Asserto has the ability to assert exceptions are raised on callables using a simple API. from asserto import asserto import typing def simple_callable ( x : int ) -> typing . NoReturn : raise ValueError ( x ) def test_exc_handling (): asserto ( simple_callable ) . should_raise ( ValueError ) . when_called_with ( x = 25 )","title":"Exception Handling:"},{"location":"#dynamic-lookups","text":"Asserto has the ability to dynamically lookup attributes on any object type. This is handled using the attr_is(expected) syntax. from asserto import asserto class Foo : def __init__ ( self , x ) -> None : self . x = x def double_x ( self ) -> int : return self . x * 2 def test_foo_dynamically () -> None : # dynamically looking up `x` (attr) or `double_x` bound method & invoking it! asserto ( Foo ( 10 )) . x_is ( 10 ) . double_x_is ( 20 )","title":"Dynamic Lookups:"},{"location":"#dynamic-assert-registration","text":"Asserto allows users to easily bolt on their assertion functions. from asserto import asserto from asserto import register_assert @register_assert # Option 1. def custom_assert ( self ): if self . actual != 5 : self . check_should_raise ( f \" { self . actual } did not equal five!\" ) register_assert ( custom_assert ) # Option 2 def test_user_defined_callables () -> None : asserto ( 6 ) . custom_assert () yields the following: E AssertionError: 6 did not equal five!","title":"Dynamic assert registration"},{"location":"advanced/","text":"","title":"Advanced Usage"},{"location":"assertions/","text":"Asserto API \u00b6 The entrypoint into asserting objects. Parameters: Name Type Description Default actual typing . Any ... required warn_unused bool ... False ends_with ( suffix ) \u00b6 Asserts that the actual value ends with suffix. Parameters: Name Type Description Default suffix str The suffix to compare the tail of the string against. required starts_with ( prefix ) \u00b6 Asserts that the actual value ends with prefix. Parameters: Name Type Description Default prefix str The prefix to compare the head of the string against. required is_digit () \u00b6 Asserts that the actual value contains only unicode letters and that the string has at least a single character. is_alpha () \u00b6 Asserts that the actual value contains only unicode letters and that the string has at least a single character. match ( pattern , flags = 0 ) \u00b6 Asserts that the actual value provided matches (at least in part) from the beginning of it the pattern provided. This is only a 'begins with' partial match. Opt for fullmatch to perform a pattern match on the entirety of the actual value. Parameters: Name Type Description Default pattern RE_PATTERN_ALIAS The regular expression pattern to use; r\"\" is encouraged. required flags RE_FLAGS_ALIAS An integer (or RegexFlag) representing flags to apply. 0 search ( pattern , flags = 0 ) \u00b6 Asserts that the actual value provided has at least one single match of the pattern at some point within it. Parameters: Name Type Description Default pattern RE_PATTERN_ALIAS The regular expression pattern to use; r\"\" is encouraged. required flags RE_FLAGS_ALIAS An integer (or RegexFlag) representing flags to apply. 0 fullmatch ( pattern , flags = 0 ) \u00b6 Asserts that the actual value provided wholly matches the pattern provided. Providing ^ & $ is not necessary as they are implicitly inferred. Parameters: Name Type Description Default pattern RE_PATTERN_ALIAS The regular expression pattern to use; r\"\" is encouraged. required flags RE_FLAGS_ALIAS An integer (or RegexFlag) representing flags to apply. 0 findall ( pattern , count , flags = 0 ) \u00b6 Asserts that the total count of non overlapping occurrences of pattern is equal to count. Parameters: Name Type Description Default pattern RE_PATTERN_ALIAS The regular expression pattern to use; r\"\" is encouraged. required count int The expected number of elements expected in the fullmatch returned sequence. required flags RE_FLAGS_ALIAS An integer (or RegexFlag) representing flags to apply. 0 is_true () \u00b6 Asserts that the actual value is explicitly True. This uses identity checks internally, to check if a value is considered truthy use is_truthy() instead. is_truthy () \u00b6 Asserts that the actual value is True in a boolean context. bool(actual) is called internally and the outcome is asserted to be True . is_false () \u00b6 Asserts that the actual value is explicitly False. This uses identity checks internally, to check if a value is considered falsy use is_falsy() instead. is_falsy () \u00b6 Asserts that the actual value is False in a boolean context. bool(actual) is called internally and the outcome is asserted to be False . is_equal_to ( other ) \u00b6 Compares the value against other for equality. Parameters: Name Type Description Default other typing . Any The other object to compare against. required Returns: Type Description Asserto The instance of Asserto to chain asserts. is_not_equal_to ( other ) \u00b6 Compares the value against other for non equality. Parameters: Name Type Description Default other typing . Any The other object to compare against. required Returns: Type Description Asserto The instance of Asserto to chain asserts. has_length ( expected ) \u00b6 A simple check that the actual value is equal to expected utilising the built in len(...) Parameters: Name Type Description Default expected int An int to compare the length against. required Returns: Type Description Asserto The instance of Asserto to chain asserts. is_instance ( cls_or_tuple ) \u00b6 Checks if the value provided is either: :: A direct subclass. :: An indirect subclass. :: A virtual subclass registered via the abc. Parameters: Name Type Description Default cls_or_tuple typing . Union [ typing . Any , typing . Iterable [ typing . Any ]] A single Type, or iterable of types to check the object against. required has_same_identity_as ( other ) \u00b6 Checks that the value refers to the same object in memory as other .` Parameters: Name Type Description Default other typing . Any The other object to compare identity of. required Returns: Type Description Asserto The instance of Asserto to chain asserts. does_not_have_same_identity_as ( other ) \u00b6 Checks that the value does not refer to the same object in memory as other . Parameters: Name Type Description Default other typing . Any The other object to compare identity of. required Returns: Type Description Asserto The instance of Asserto to chain asserts. is_none () \u00b6 Checks the actual value is None. Python NoneType is a singleton so is checks are used Returns: Type Description Asserto The Asserto instance for fluency. is_not_none () \u00b6 Checks the actual value is not None . Python None is a singleton so is not checks are used. Returns: Type Description Asserto The Asserto instance for fluency is_zero () \u00b6 Checks the actual value is zero. Returns: Type Description Asserto The Asserto instance for fluency. is_not_zero () \u00b6 Checks the actual value is not zero. Returns: Type Description Asserto The Asserto instance for fluency. is_greater_than ( target ) \u00b6 Checks the actual value is greater than the target. Parameters: Name Type Description Default target numbers . Number A number to compare the actual against. required Returns: Type Description Asserto The Asserto instance for fluency.","title":"Assertions"},{"location":"assertions/#asserto-api","text":"The entrypoint into asserting objects. Parameters: Name Type Description Default actual typing . Any ... required warn_unused bool ... False","title":"Asserto API"},{"location":"assertions/#asserto._asserto.Asserto.ends_with","text":"Asserts that the actual value ends with suffix. Parameters: Name Type Description Default suffix str The suffix to compare the tail of the string against. required","title":"ends_with()"},{"location":"assertions/#asserto._asserto.Asserto.starts_with","text":"Asserts that the actual value ends with prefix. Parameters: Name Type Description Default prefix str The prefix to compare the head of the string against. required","title":"starts_with()"},{"location":"assertions/#asserto._asserto.Asserto.is_digit","text":"Asserts that the actual value contains only unicode letters and that the string has at least a single character.","title":"is_digit()"},{"location":"assertions/#asserto._asserto.Asserto.is_alpha","text":"Asserts that the actual value contains only unicode letters and that the string has at least a single character.","title":"is_alpha()"},{"location":"assertions/#asserto._asserto.Asserto.match","text":"Asserts that the actual value provided matches (at least in part) from the beginning of it the pattern provided. This is only a 'begins with' partial match. Opt for fullmatch to perform a pattern match on the entirety of the actual value. Parameters: Name Type Description Default pattern RE_PATTERN_ALIAS The regular expression pattern to use; r\"\" is encouraged. required flags RE_FLAGS_ALIAS An integer (or RegexFlag) representing flags to apply. 0","title":"match()"},{"location":"assertions/#asserto._asserto.Asserto.search","text":"Asserts that the actual value provided has at least one single match of the pattern at some point within it. Parameters: Name Type Description Default pattern RE_PATTERN_ALIAS The regular expression pattern to use; r\"\" is encouraged. required flags RE_FLAGS_ALIAS An integer (or RegexFlag) representing flags to apply. 0","title":"search()"},{"location":"assertions/#asserto._asserto.Asserto.fullmatch","text":"Asserts that the actual value provided wholly matches the pattern provided. Providing ^ & $ is not necessary as they are implicitly inferred. Parameters: Name Type Description Default pattern RE_PATTERN_ALIAS The regular expression pattern to use; r\"\" is encouraged. required flags RE_FLAGS_ALIAS An integer (or RegexFlag) representing flags to apply. 0","title":"fullmatch()"},{"location":"assertions/#asserto._asserto.Asserto.findall","text":"Asserts that the total count of non overlapping occurrences of pattern is equal to count. Parameters: Name Type Description Default pattern RE_PATTERN_ALIAS The regular expression pattern to use; r\"\" is encouraged. required count int The expected number of elements expected in the fullmatch returned sequence. required flags RE_FLAGS_ALIAS An integer (or RegexFlag) representing flags to apply. 0","title":"findall()"},{"location":"assertions/#asserto._asserto.Asserto.is_true","text":"Asserts that the actual value is explicitly True. This uses identity checks internally, to check if a value is considered truthy use is_truthy() instead.","title":"is_true()"},{"location":"assertions/#asserto._asserto.Asserto.is_truthy","text":"Asserts that the actual value is True in a boolean context. bool(actual) is called internally and the outcome is asserted to be True .","title":"is_truthy()"},{"location":"assertions/#asserto._asserto.Asserto.is_false","text":"Asserts that the actual value is explicitly False. This uses identity checks internally, to check if a value is considered falsy use is_falsy() instead.","title":"is_false()"},{"location":"assertions/#asserto._asserto.Asserto.is_falsy","text":"Asserts that the actual value is False in a boolean context. bool(actual) is called internally and the outcome is asserted to be False .","title":"is_falsy()"},{"location":"assertions/#asserto._asserto.Asserto.is_equal_to","text":"Compares the value against other for equality. Parameters: Name Type Description Default other typing . Any The other object to compare against. required Returns: Type Description Asserto The instance of Asserto to chain asserts.","title":"is_equal_to()"},{"location":"assertions/#asserto._asserto.Asserto.is_not_equal_to","text":"Compares the value against other for non equality. Parameters: Name Type Description Default other typing . Any The other object to compare against. required Returns: Type Description Asserto The instance of Asserto to chain asserts.","title":"is_not_equal_to()"},{"location":"assertions/#asserto._asserto.Asserto.has_length","text":"A simple check that the actual value is equal to expected utilising the built in len(...) Parameters: Name Type Description Default expected int An int to compare the length against. required Returns: Type Description Asserto The instance of Asserto to chain asserts.","title":"has_length()"},{"location":"assertions/#asserto._asserto.Asserto.is_instance","text":"Checks if the value provided is either: :: A direct subclass. :: An indirect subclass. :: A virtual subclass registered via the abc. Parameters: Name Type Description Default cls_or_tuple typing . Union [ typing . Any , typing . Iterable [ typing . Any ]] A single Type, or iterable of types to check the object against. required","title":"is_instance()"},{"location":"assertions/#asserto._asserto.Asserto.has_same_identity_as","text":"Checks that the value refers to the same object in memory as other .` Parameters: Name Type Description Default other typing . Any The other object to compare identity of. required Returns: Type Description Asserto The instance of Asserto to chain asserts.","title":"has_same_identity_as()"},{"location":"assertions/#asserto._asserto.Asserto.does_not_have_same_identity_as","text":"Checks that the value does not refer to the same object in memory as other . Parameters: Name Type Description Default other typing . Any The other object to compare identity of. required Returns: Type Description Asserto The instance of Asserto to chain asserts.","title":"does_not_have_same_identity_as()"},{"location":"assertions/#asserto._asserto.Asserto.is_none","text":"Checks the actual value is None. Python NoneType is a singleton so is checks are used Returns: Type Description Asserto The Asserto instance for fluency.","title":"is_none()"},{"location":"assertions/#asserto._asserto.Asserto.is_not_none","text":"Checks the actual value is not None . Python None is a singleton so is not checks are used. Returns: Type Description Asserto The Asserto instance for fluency","title":"is_not_none()"},{"location":"assertions/#asserto._asserto.Asserto.is_zero","text":"Checks the actual value is zero. Returns: Type Description Asserto The Asserto instance for fluency.","title":"is_zero()"},{"location":"assertions/#asserto._asserto.Asserto.is_not_zero","text":"Checks the actual value is not zero. Returns: Type Description Asserto The Asserto instance for fluency.","title":"is_not_zero()"},{"location":"assertions/#asserto._asserto.Asserto.is_greater_than","text":"Checks the actual value is greater than the target. Parameters: Name Type Description Default target numbers . Number A number to compare the actual against. required Returns: Type Description Asserto The Asserto instance for fluency.","title":"is_greater_than()"},{"location":"quickstart/","text":"","title":"QuickStart"}]}