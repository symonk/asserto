{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the documentation for Asserto . \u00b6 Usage \u00b6 Asserto is a simple assertion library to add flexibility and fluency into assertions. Asserto makes assertion writing powerful yet effortless for the more complex scenarios. Check out some examples below: from asserto import asserto def test_something (): asserto (( 5 , 6 , 7 )) . is_length ( 3 ) . is_equal_to (( 5 , 6 , 7 )) # Or if you are using the `asserto-pytest` plugin: def test_with_pytest ( asserto ): asserto ( \"Hello\" ) . is_length ( 5 ) . matches ( r \"^[A-Z][a-z] {4} $\" )","title":"Introduction"},{"location":"#welcome-to-the-documentation-for-asserto","text":"","title":"Welcome to the documentation for Asserto."},{"location":"#usage","text":"Asserto is a simple assertion library to add flexibility and fluency into assertions. Asserto makes assertion writing powerful yet effortless for the more complex scenarios. Check out some examples below: from asserto import asserto def test_something (): asserto (( 5 , 6 , 7 )) . is_length ( 3 ) . is_equal_to (( 5 , 6 , 7 )) # Or if you are using the `asserto-pytest` plugin: def test_with_pytest ( asserto ): asserto ( \"Hello\" ) . is_length ( 5 ) . matches ( r \"^[A-Z][a-z] {4} $\" )","title":"Usage"},{"location":"advanced/","text":"","title":"Advanced Usage"},{"location":"assertions/","text":"Asserto API \u00b6 The entrypoint into asserting objects. Parameters: Name Type Description Default actual typing . Any ... required warn_unused bool ... False ends_with ( suffix ) \u00b6 Asserts that the actual value ends with suffix. Parameters: Name Type Description Default suffix str The suffix to compare the tail of the string against. required starts_with ( prefix ) \u00b6 Asserts that the actual value ends with prefix. Parameters: Name Type Description Default prefix str The prefix to compare the head of the string against. required is_digit () \u00b6 Asserts that the actual value contains only unicode letters and that the string has at least a single character. is_alpha () \u00b6 Asserts that the actual value contains only unicode letters and that the string has at least a single character. match ( pattern , flags = 0 ) \u00b6 Asserts that the actual value provided matches (at least in part) from the beginning of it the pattern provided. This is only a 'begins with' partial match. Opt for fullmatch to perform a pattern match on the entirety of the actual value. Parameters: Name Type Description Default pattern RE_PATTERN_ALIAS The regular expression pattern to use; r\"\" is encouraged. required flags RE_FLAGS_ALIAS An integer (or RegexFlag) representing flags to apply. 0 search ( pattern , flags = 0 ) \u00b6 Asserts that the actual value provided has at least one single match of the pattern at some point within it. Parameters: Name Type Description Default pattern RE_PATTERN_ALIAS The regular expression pattern to use; r\"\" is encouraged. required flags RE_FLAGS_ALIAS An integer (or RegexFlag) representing flags to apply. 0 fullmatch ( pattern , flags = 0 ) \u00b6 Asserts that the actual value provided wholly matches the pattern provided. Providing ^ & $ is not necessary as they are implicitly inferred. Parameters: Name Type Description Default pattern RE_PATTERN_ALIAS The regular expression pattern to use; r\"\" is encouraged. required flags RE_FLAGS_ALIAS An integer (or RegexFlag) representing flags to apply. 0 findall ( pattern , count , flags = 0 ) \u00b6 Asserts that the total count of non overlapping occurrences of pattern is equal to count. Parameters: Name Type Description Default pattern RE_PATTERN_ALIAS The regular expression pattern to use; r\"\" is encouraged. required count int The expected number of elements expected in the fullmatch returned sequence. required flags RE_FLAGS_ALIAS An integer (or RegexFlag) representing flags to apply. 0 is_true () \u00b6 Asserts that the actual value is explicitly True. This uses identity checks internally, to check if a value is considered truthy use is_truthy() instead. is_truthy () \u00b6 Asserts that the actual value is True in a boolean context. bool(actual) is called internally and the outcome is asserted to be True . is_false () \u00b6 Asserts that the actual value is explicitly False. This uses identity checks internally, to check if a value is considered falsy use is_falsy() instead. is_falsy () \u00b6 Asserts that the actual value is False in a boolean context. bool(actual) is called internally and the outcome is asserted to be False . is_equal_to ( other ) \u00b6 Compares the value against other for equality. Parameters: Name Type Description Default other typing . Any The other object to compare against. required Returns: Type Description Asserto The instance of Asserto to chain asserts. is_not_equal_to ( other ) \u00b6 Compares the value against other for non equality. Parameters: Name Type Description Default other typing . Any The other object to compare against. required Returns: Type Description Asserto The instance of Asserto to chain asserts. has_length ( expected ) \u00b6 A simple check that the actual value is equal to expected utilising the built in len(...) Parameters: Name Type Description Default expected int An int to compare the length against. required Returns: Type Description Asserto The instance of Asserto to chain asserts. is_instance ( cls_or_tuple ) \u00b6 Checks if the value provided is either: :: A direct subclass. :: An indirect subclass. :: A virtual subclass registered via the abc. Parameters: Name Type Description Default cls_or_tuple typing . Union [ typing . Any , typing . Iterable [ typing . Any ]] A single Type, or iterable of types to check the object against. required has_same_identity_as ( other ) \u00b6 Checks that the value refers to the same object in memory as other .` Parameters: Name Type Description Default other typing . Any The other object to compare identity of. required Returns: Type Description Asserto The instance of Asserto to chain asserts. does_not_have_same_identity_as ( other ) \u00b6 Checks that the value does not refer to the same object in memory as other . Parameters: Name Type Description Default other typing . Any The other object to compare identity of. required Returns: Type Description Asserto The instance of Asserto to chain asserts. is_none () \u00b6 Checks the actual value is None. Python NoneType is a singleton so is checks are used Returns: Type Description Asserto The Asserto instance for fluency. is_not_none () \u00b6 Checks the actual value is not None . Python None is a singleton so is not checks are used. Returns: Type Description Asserto The Asserto instance for fluency","title":"Assertions"},{"location":"assertions/#asserto-api","text":"The entrypoint into asserting objects. Parameters: Name Type Description Default actual typing . Any ... required warn_unused bool ... False","title":"Asserto API"},{"location":"assertions/#asserto._asserto.Asserto.ends_with","text":"Asserts that the actual value ends with suffix. Parameters: Name Type Description Default suffix str The suffix to compare the tail of the string against. required","title":"ends_with()"},{"location":"assertions/#asserto._asserto.Asserto.starts_with","text":"Asserts that the actual value ends with prefix. Parameters: Name Type Description Default prefix str The prefix to compare the head of the string against. required","title":"starts_with()"},{"location":"assertions/#asserto._asserto.Asserto.is_digit","text":"Asserts that the actual value contains only unicode letters and that the string has at least a single character.","title":"is_digit()"},{"location":"assertions/#asserto._asserto.Asserto.is_alpha","text":"Asserts that the actual value contains only unicode letters and that the string has at least a single character.","title":"is_alpha()"},{"location":"assertions/#asserto._asserto.Asserto.match","text":"Asserts that the actual value provided matches (at least in part) from the beginning of it the pattern provided. This is only a 'begins with' partial match. Opt for fullmatch to perform a pattern match on the entirety of the actual value. Parameters: Name Type Description Default pattern RE_PATTERN_ALIAS The regular expression pattern to use; r\"\" is encouraged. required flags RE_FLAGS_ALIAS An integer (or RegexFlag) representing flags to apply. 0","title":"match()"},{"location":"assertions/#asserto._asserto.Asserto.search","text":"Asserts that the actual value provided has at least one single match of the pattern at some point within it. Parameters: Name Type Description Default pattern RE_PATTERN_ALIAS The regular expression pattern to use; r\"\" is encouraged. required flags RE_FLAGS_ALIAS An integer (or RegexFlag) representing flags to apply. 0","title":"search()"},{"location":"assertions/#asserto._asserto.Asserto.fullmatch","text":"Asserts that the actual value provided wholly matches the pattern provided. Providing ^ & $ is not necessary as they are implicitly inferred. Parameters: Name Type Description Default pattern RE_PATTERN_ALIAS The regular expression pattern to use; r\"\" is encouraged. required flags RE_FLAGS_ALIAS An integer (or RegexFlag) representing flags to apply. 0","title":"fullmatch()"},{"location":"assertions/#asserto._asserto.Asserto.findall","text":"Asserts that the total count of non overlapping occurrences of pattern is equal to count. Parameters: Name Type Description Default pattern RE_PATTERN_ALIAS The regular expression pattern to use; r\"\" is encouraged. required count int The expected number of elements expected in the fullmatch returned sequence. required flags RE_FLAGS_ALIAS An integer (or RegexFlag) representing flags to apply. 0","title":"findall()"},{"location":"assertions/#asserto._asserto.Asserto.is_true","text":"Asserts that the actual value is explicitly True. This uses identity checks internally, to check if a value is considered truthy use is_truthy() instead.","title":"is_true()"},{"location":"assertions/#asserto._asserto.Asserto.is_truthy","text":"Asserts that the actual value is True in a boolean context. bool(actual) is called internally and the outcome is asserted to be True .","title":"is_truthy()"},{"location":"assertions/#asserto._asserto.Asserto.is_false","text":"Asserts that the actual value is explicitly False. This uses identity checks internally, to check if a value is considered falsy use is_falsy() instead.","title":"is_false()"},{"location":"assertions/#asserto._asserto.Asserto.is_falsy","text":"Asserts that the actual value is False in a boolean context. bool(actual) is called internally and the outcome is asserted to be False .","title":"is_falsy()"},{"location":"assertions/#asserto._asserto.Asserto.is_equal_to","text":"Compares the value against other for equality. Parameters: Name Type Description Default other typing . Any The other object to compare against. required Returns: Type Description Asserto The instance of Asserto to chain asserts.","title":"is_equal_to()"},{"location":"assertions/#asserto._asserto.Asserto.is_not_equal_to","text":"Compares the value against other for non equality. Parameters: Name Type Description Default other typing . Any The other object to compare against. required Returns: Type Description Asserto The instance of Asserto to chain asserts.","title":"is_not_equal_to()"},{"location":"assertions/#asserto._asserto.Asserto.has_length","text":"A simple check that the actual value is equal to expected utilising the built in len(...) Parameters: Name Type Description Default expected int An int to compare the length against. required Returns: Type Description Asserto The instance of Asserto to chain asserts.","title":"has_length()"},{"location":"assertions/#asserto._asserto.Asserto.is_instance","text":"Checks if the value provided is either: :: A direct subclass. :: An indirect subclass. :: A virtual subclass registered via the abc. Parameters: Name Type Description Default cls_or_tuple typing . Union [ typing . Any , typing . Iterable [ typing . Any ]] A single Type, or iterable of types to check the object against. required","title":"is_instance()"},{"location":"assertions/#asserto._asserto.Asserto.has_same_identity_as","text":"Checks that the value refers to the same object in memory as other .` Parameters: Name Type Description Default other typing . Any The other object to compare identity of. required Returns: Type Description Asserto The instance of Asserto to chain asserts.","title":"has_same_identity_as()"},{"location":"assertions/#asserto._asserto.Asserto.does_not_have_same_identity_as","text":"Checks that the value does not refer to the same object in memory as other . Parameters: Name Type Description Default other typing . Any The other object to compare identity of. required Returns: Type Description Asserto The instance of Asserto to chain asserts.","title":"does_not_have_same_identity_as()"},{"location":"assertions/#asserto._asserto.Asserto.is_none","text":"Checks the actual value is None. Python NoneType is a singleton so is checks are used Returns: Type Description Asserto The Asserto instance for fluency.","title":"is_none()"},{"location":"assertions/#asserto._asserto.Asserto.is_not_none","text":"Checks the actual value is not None . Python None is a singleton so is not checks are used. Returns: Type Description Asserto The Asserto instance for fluency","title":"is_not_none()"},{"location":"quickstart/","text":"","title":"QuickStart"}]}