{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the documentation for Asserto . Usage Asserto is a simple assertion library to add flexibility and fluency into assertions. Asserto makes assertion writing powerful yet effortless for the more complex scenarios. Check out some examples below: from asserto import asserto def test_something (): asserto (( 5 , 6 , 7 )) . is_length ( 3 ) . is_equal_to (( 5 , 6 , 7 )) # Or if you are using the `asserto-pytest` plugin: def test_with_pytest ( asserto ): asserto ( \"Hello\" ) . is_length ( 5 ) . matches ( r \"^[A-Z][a-z] {4} $\" )","title":"Overview"},{"location":"#welcome-to-the-documentation-for-asserto","text":"","title":"Welcome to the documentation for Asserto."},{"location":"#usage","text":"Asserto is a simple assertion library to add flexibility and fluency into assertions. Asserto makes assertion writing powerful yet effortless for the more complex scenarios. Check out some examples below: from asserto import asserto def test_something (): asserto (( 5 , 6 , 7 )) . is_length ( 3 ) . is_equal_to (( 5 , 6 , 7 )) # Or if you are using the `asserto-pytest` plugin: def test_with_pytest ( asserto ): asserto ( \"Hello\" ) . is_length ( 5 ) . matches ( r \"^[A-Z][a-z] {4} $\" )","title":"Usage"},{"location":"assertions/","text":"Asserto API Asserto. ends_with ( self , suffix ) Asserts that the value provided begins with the suffix. :param suffix: A substring to ensure the value begins with. is_equal_to ( self , other ) Compares the value against other for equality. :param other: The other object to compare against. :return: The instance of Asserto to chain asserts. is_false ( self ) Checks the actual value is False. :return: The Asserto instance for fluency. is_instance ( self , cls_or_tuple ) Checks if the value provided is either: :: A direct subclass. :: An indirect subclass. :: A virtual subclass registered via the abc. :param cls_or_tuple: A single Type, or iterable of types to check the object against. is_none ( self ) Checks the actual value is None. Python NoneType is a singleton so is checks are used :return: The Asserto instance for fluency. is_not_none ( self ) Checks the actual value is not None . Python None is a singleton so is not checks are used. :return: The Asserto instance for fluency is_true ( self ) Checks the actual value is True. :return: The Asserto instance for fluency.","title":"Assertions"},{"location":"assertions/#asserto-api","text":"Asserto.","title":"Asserto API"},{"location":"assertions/#asserto._asserto.Asserto.ends_with","text":"Asserts that the value provided begins with the suffix. :param suffix: A substring to ensure the value begins with.","title":"ends_with()"},{"location":"assertions/#asserto._asserto.Asserto.is_equal_to","text":"Compares the value against other for equality. :param other: The other object to compare against. :return: The instance of Asserto to chain asserts.","title":"is_equal_to()"},{"location":"assertions/#asserto._asserto.Asserto.is_false","text":"Checks the actual value is False. :return: The Asserto instance for fluency.","title":"is_false()"},{"location":"assertions/#asserto._asserto.Asserto.is_instance","text":"Checks if the value provided is either: :: A direct subclass. :: An indirect subclass. :: A virtual subclass registered via the abc. :param cls_or_tuple: A single Type, or iterable of types to check the object against.","title":"is_instance()"},{"location":"assertions/#asserto._asserto.Asserto.is_none","text":"Checks the actual value is None. Python NoneType is a singleton so is checks are used :return: The Asserto instance for fluency.","title":"is_none()"},{"location":"assertions/#asserto._asserto.Asserto.is_not_none","text":"Checks the actual value is not None . Python None is a singleton so is not checks are used. :return: The Asserto instance for fluency","title":"is_not_none()"},{"location":"assertions/#asserto._asserto.Asserto.is_true","text":"Checks the actual value is True. :return: The Asserto instance for fluency.","title":"is_true()"}]}