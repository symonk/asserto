{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the documentation for Asserto . \u00b6 Usage \u00b6 Asserto is a simple assertion library to add flexibility and fluency into assertions. Asserto makes assertion writing powerful yet effortless for the more complex scenarios. Check out some examples below: from asserto import asserto def test_something (): asserto (( 5 , 6 , 7 )) . is_length ( 3 ) . is_equal_to (( 5 , 6 , 7 )) # Or if you are using the `asserto-pytest` plugin: def test_with_pytest ( asserto ): asserto ( \"Hello\" ) . is_length ( 5 ) . matches ( r \"^[A-Z][a-z] {4} $\" )","title":"Introduction"},{"location":"#welcome-to-the-documentation-for-asserto","text":"","title":"Welcome to the documentation for Asserto."},{"location":"#usage","text":"Asserto is a simple assertion library to add flexibility and fluency into assertions. Asserto makes assertion writing powerful yet effortless for the more complex scenarios. Check out some examples below: from asserto import asserto def test_something (): asserto (( 5 , 6 , 7 )) . is_length ( 3 ) . is_equal_to (( 5 , 6 , 7 )) # Or if you are using the `asserto-pytest` plugin: def test_with_pytest ( asserto ): asserto ( \"Hello\" ) . is_length ( 5 ) . matches ( r \"^[A-Z][a-z] {4} $\" )","title":"Usage"},{"location":"advanced/","text":"","title":"Advanced Usage"},{"location":"assertions/","text":"Asserto API \u00b6 The entrypoint into asserting objects. Parameters: Name Type Description Default actual typing . Any The actual value required __enter__ () \u00b6 Enter a soft context mode; During this context AssertionErrors are silently ignored until the context is exited at which point any assertions will cause test failure(s) and raise the sequence of AssertionError's in the order in which they occurred. Returns: Type Description Asserto The instance of Asserto . __getattr__ ( item ) \u00b6 Adds the capability to object class or instance attributes dynamically. Supports user defined object types as well as built in mapping types. In the case of a mapping type the attribute name will be the key in the dictionary and value called its value to check for equality. Parameters: Name Type Description Default item str The attribute name to lookup required _dispatch ( handle_instance , assertion_method , message , * args , ** kwargs ) \u00b6 Delegate a check to an underlying handler instance. Parameters: Name Type Description Default handle_instance str The handler to delegate too. required assertion_method str The method to invoke on the handler. required message str The error message to raise on failure. Arbitrary args & kwargs to pass through to the handler method. required _warn_not_triggered () staticmethod \u00b6 Triggers a warning if an asserto instance was created and no assertion methods was called to highlight potential user errors. described_as ( description ) \u00b6 Set the full `AssertionError`` message to a custom reason. If this is invoked anything after the category (if also set) will be user defined. Parameters: Name Type Description Default description str The reason to display if an AssertionError is raised. required Returns: Type Description Asserto The Asserto instance for fluency. does_not_refer_to ( other ) \u00b6 Checks that the value does not refer to the same object in memory as other . Parameters: Name Type Description Default other typing . Any The other object to compare identity of. required Returns: Type Description Asserto The instance of Asserto to chain asserts. ends_with ( suffix ) \u00b6 Asserts that the actual value ends with suffix. Parameters: Name Type Description Default suffix str The suffix to compare the tail of the string against. required error ( reason ) \u00b6 The single point of assertion failing. All functions delegate here to raise the underlying assertion errors. Parameters: Name Type Description Default reason str A reason for the failure. if self.description was set; it takes precedence. required Returns: Type Description Asserto The Asserto instance for fluency has_length ( expected ) \u00b6 A simple check that the actual value is equal to expected utilising the built in len(...) Parameters: Name Type Description Default expected int An int to compare the length against. required Returns: Type Description Asserto The instance of Asserto to chain asserts. is_equal_to ( other ) \u00b6 Compares the value against other for equality. Parameters: Name Type Description Default other typing . Any The other object to compare against. required Returns: Type Description Asserto The instance of Asserto to chain asserts. is_false () \u00b6 Checks the actual value is False. Returns: Type Description Asserto The Asserto instance for fluency. is_instance ( cls_or_tuple ) \u00b6 Checks if the value provided is either: :: A direct subclass. :: An indirect subclass. :: A virtual subclass registered via the abc. Parameters: Name Type Description Default cls_or_tuple typing . Union [ typing . Any , typing . Iterable [ typing . Any ]] A single Type, or iterable of types to check the object against. required is_none () \u00b6 Checks the actual value is None. Python NoneType is a singleton so is checks are used Returns: Type Description Asserto The Asserto instance for fluency. is_not_equal_to ( other ) \u00b6 Compares the value against other for non equality. Parameters: Name Type Description Default other typing . Any The other object to compare against. required Returns: Type Description Asserto The instance of Asserto to chain asserts. is_not_none () \u00b6 Checks the actual value is not None . Python None is a singleton so is not checks are used. Returns: Type Description Asserto The Asserto instance for fluency is_true () \u00b6 Checks the actual value is True. Returns: Type Description Asserto The Asserto instance for fluency. refers_to ( other ) \u00b6 Checks that the value refers to the same object in memory as other .` Parameters: Name Type Description Default other typing . Any The other object to compare identity of. required Returns: Type Description Asserto The instance of Asserto to chain asserts. should_raise ( exceptions ) \u00b6 Wraps the actual value into a callable if it is callable itself; Parameters: Name Type Description Default exceptions EXC_TYPES_ALIAS The type of exception expected. required Returns: Type Description Raises The Asserto instance for fluency starts_with ( prefix ) \u00b6 Asserts that the actual value ends with prefix. Parameters: Name Type Description Default prefix str The prefix to compare the head of the string against. required triggered () property writable \u00b6 Check if the instance has invoked any methods that could have raised an AssertionError . Returns: Type Description bool boolean indicating if a method has been invoked. with_category ( category ) \u00b6 Set the category for the assertion. Categories are prefixed to the assertion messages, for example: Example: Usage:: asserto(25).with_category(\"foo\").is_equal_to(26) `AssertionError([\"foo\"] 25 was not equal to: 26)` Args: category: The Category to group the assertion under.","title":"Assertions"},{"location":"assertions/#asserto-api","text":"The entrypoint into asserting objects. Parameters: Name Type Description Default actual typing . Any The actual value required","title":"Asserto API"},{"location":"assertions/#asserto._asserto.Asserto.__enter__","text":"Enter a soft context mode; During this context AssertionErrors are silently ignored until the context is exited at which point any assertions will cause test failure(s) and raise the sequence of AssertionError's in the order in which they occurred. Returns: Type Description Asserto The instance of Asserto .","title":"__enter__()"},{"location":"assertions/#asserto._asserto.Asserto.__getattr__","text":"Adds the capability to object class or instance attributes dynamically. Supports user defined object types as well as built in mapping types. In the case of a mapping type the attribute name will be the key in the dictionary and value called its value to check for equality. Parameters: Name Type Description Default item str The attribute name to lookup required","title":"__getattr__()"},{"location":"assertions/#asserto._asserto.Asserto._dispatch","text":"Delegate a check to an underlying handler instance. Parameters: Name Type Description Default handle_instance str The handler to delegate too. required assertion_method str The method to invoke on the handler. required message str The error message to raise on failure. Arbitrary args & kwargs to pass through to the handler method. required","title":"_dispatch()"},{"location":"assertions/#asserto._asserto.Asserto._warn_not_triggered","text":"Triggers a warning if an asserto instance was created and no assertion methods was called to highlight potential user errors.","title":"_warn_not_triggered()"},{"location":"assertions/#asserto._asserto.Asserto.described_as","text":"Set the full `AssertionError`` message to a custom reason. If this is invoked anything after the category (if also set) will be user defined. Parameters: Name Type Description Default description str The reason to display if an AssertionError is raised. required Returns: Type Description Asserto The Asserto instance for fluency.","title":"described_as()"},{"location":"assertions/#asserto._asserto.Asserto.does_not_refer_to","text":"Checks that the value does not refer to the same object in memory as other . Parameters: Name Type Description Default other typing . Any The other object to compare identity of. required Returns: Type Description Asserto The instance of Asserto to chain asserts.","title":"does_not_refer_to()"},{"location":"assertions/#asserto._asserto.Asserto.ends_with","text":"Asserts that the actual value ends with suffix. Parameters: Name Type Description Default suffix str The suffix to compare the tail of the string against. required","title":"ends_with()"},{"location":"assertions/#asserto._asserto.Asserto.error","text":"The single point of assertion failing. All functions delegate here to raise the underlying assertion errors. Parameters: Name Type Description Default reason str A reason for the failure. if self.description was set; it takes precedence. required Returns: Type Description Asserto The Asserto instance for fluency","title":"error()"},{"location":"assertions/#asserto._asserto.Asserto.has_length","text":"A simple check that the actual value is equal to expected utilising the built in len(...) Parameters: Name Type Description Default expected int An int to compare the length against. required Returns: Type Description Asserto The instance of Asserto to chain asserts.","title":"has_length()"},{"location":"assertions/#asserto._asserto.Asserto.is_equal_to","text":"Compares the value against other for equality. Parameters: Name Type Description Default other typing . Any The other object to compare against. required Returns: Type Description Asserto The instance of Asserto to chain asserts.","title":"is_equal_to()"},{"location":"assertions/#asserto._asserto.Asserto.is_false","text":"Checks the actual value is False. Returns: Type Description Asserto The Asserto instance for fluency.","title":"is_false()"},{"location":"assertions/#asserto._asserto.Asserto.is_instance","text":"Checks if the value provided is either: :: A direct subclass. :: An indirect subclass. :: A virtual subclass registered via the abc. Parameters: Name Type Description Default cls_or_tuple typing . Union [ typing . Any , typing . Iterable [ typing . Any ]] A single Type, or iterable of types to check the object against. required","title":"is_instance()"},{"location":"assertions/#asserto._asserto.Asserto.is_none","text":"Checks the actual value is None. Python NoneType is a singleton so is checks are used Returns: Type Description Asserto The Asserto instance for fluency.","title":"is_none()"},{"location":"assertions/#asserto._asserto.Asserto.is_not_equal_to","text":"Compares the value against other for non equality. Parameters: Name Type Description Default other typing . Any The other object to compare against. required Returns: Type Description Asserto The instance of Asserto to chain asserts.","title":"is_not_equal_to()"},{"location":"assertions/#asserto._asserto.Asserto.is_not_none","text":"Checks the actual value is not None . Python None is a singleton so is not checks are used. Returns: Type Description Asserto The Asserto instance for fluency","title":"is_not_none()"},{"location":"assertions/#asserto._asserto.Asserto.is_true","text":"Checks the actual value is True. Returns: Type Description Asserto The Asserto instance for fluency.","title":"is_true()"},{"location":"assertions/#asserto._asserto.Asserto.refers_to","text":"Checks that the value refers to the same object in memory as other .` Parameters: Name Type Description Default other typing . Any The other object to compare identity of. required Returns: Type Description Asserto The instance of Asserto to chain asserts.","title":"refers_to()"},{"location":"assertions/#asserto._asserto.Asserto.should_raise","text":"Wraps the actual value into a callable if it is callable itself; Parameters: Name Type Description Default exceptions EXC_TYPES_ALIAS The type of exception expected. required Returns: Type Description Raises The Asserto instance for fluency","title":"should_raise()"},{"location":"assertions/#asserto._asserto.Asserto.starts_with","text":"Asserts that the actual value ends with prefix. Parameters: Name Type Description Default prefix str The prefix to compare the head of the string against. required","title":"starts_with()"},{"location":"assertions/#asserto._asserto.Asserto.triggered","text":"Check if the instance has invoked any methods that could have raised an AssertionError . Returns: Type Description bool boolean indicating if a method has been invoked.","title":"triggered()"},{"location":"assertions/#asserto._asserto.Asserto.with_category","text":"Set the category for the assertion. Categories are prefixed to the assertion messages, for example: Example: Usage:: asserto(25).with_category(\"foo\").is_equal_to(26) `AssertionError([\"foo\"] 25 was not equal to: 26)` Args: category: The Category to group the assertion under.","title":"with_category()"},{"location":"quickstart/","text":"","title":"QuickStart"}]}