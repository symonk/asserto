{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to the documentation for Asserto . Usage Asserto is a simple assertion library to add flexibility and fluency into assertions. Asserto makes assertion writing powerful yet effortless for the more complex scenarios. Check out some examples below: from asserto import asserto def test_something (): asserto (( 5 , 6 , 7 )) . is_length ( 3 ) . equals (( 5 , 6 , 7 )) # Or if you are using the `asserto-pytest` plugin: def test_with_pytest ( asserto ): asserto ( \"Hello\" ) . is_length ( 5 ) . matches ( r \"^[A-Z][a-z] {4} $\" )","title":"Overview"},{"location":"#welcome-to-the-documentation-for-asserto","text":"","title":"Welcome to the documentation for Asserto."},{"location":"#usage","text":"Asserto is a simple assertion library to add flexibility and fluency into assertions. Asserto makes assertion writing powerful yet effortless for the more complex scenarios. Check out some examples below: from asserto import asserto def test_something (): asserto (( 5 , 6 , 7 )) . is_length ( 3 ) . equals (( 5 , 6 , 7 )) # Or if you are using the `asserto-pytest` plugin: def test_with_pytest ( asserto ): asserto ( \"Hello\" ) . is_length ( 5 ) . matches ( r \"^[A-Z][a-z] {4} $\" )","title":"Usage"},{"location":"generic/","text":"","title":"Generic Assertions"},{"location":"strings/","text":"","title":"String Assertions"}]}